import{_ as a,c as s,o as e,a8 as n}from"./chunks/framework.Cpm-ryT4.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"workflow/git.md","filePath":"workflow/git.md","lastUpdated":1678680316000}'),i={name:"workflow/git.md"},p=n(`<h2 id="配置-git-的用户名和邮箱" tabindex="-1">配置 Git 的用户名和邮箱 <a class="header-anchor" href="#配置-git-的用户名和邮箱" aria-label="Permalink to &quot;配置 Git 的用户名和邮箱&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git config user.name &#39;username1&#39;</span></span>
<span class="line"><span>git config user.email test1@qq.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="git-add" tabindex="-1">git add <a class="header-anchor" href="#git-add" aria-label="Permalink to &quot;git add&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 添加某个文件到暂存区，后面可以跟多个文件，以空格区分</span></span>
<span class="line"><span>git add xxx</span></span>
<span class="line"><span># 添加当前更改的所有文件到暂存区。</span></span>
<span class="line"><span>git add .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="git-commit" tabindex="-1">git commit <a class="header-anchor" href="#git-commit" aria-label="Permalink to &quot;git commit&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 提交暂存的更改，会新开编辑器进行编辑</span></span>
<span class="line"><span>git commit</span></span>
<span class="line"><span># 提交暂存的更改，并记录下备注</span></span>
<span class="line"><span>git commit -m &quot;you message&quot;</span></span>
<span class="line"><span># 等同于 git add . &amp;&amp; git commit -m</span></span>
<span class="line"><span>git commit -am</span></span>
<span class="line"><span># 对最近一次的提交的信息进行修改,此操作会修改commit的hash值</span></span>
<span class="line"><span>git commit --amend</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="git-pull" tabindex="-1">git pull <a class="header-anchor" href="#git-pull" aria-label="Permalink to &quot;git pull&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 从远程仓库拉取代码并合并到本地，可简写为 git pull 等同于 git fetch &amp;&amp; git merge</span></span>
<span class="line"><span>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></span>
<span class="line"><span># 使用rebase的模式进行合并</span></span>
<span class="line"><span>git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="git-fetch" tabindex="-1">git fetch <a class="header-anchor" href="#git-fetch" aria-label="Permalink to &quot;git fetch&quot;">​</a></h2><p>与 git pull 不同的是 git fetch 操作仅仅只会拉取远程的更改，不会自动进行 merge 操作。对你当前的代码没有影响</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 获取远程仓库特定分支的更新</span></span>
<span class="line"><span>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span></span>
<span class="line"><span># 获取远程仓库所有分支的更新</span></span>
<span class="line"><span>git fetch --all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="修改最近一次提交的作者" tabindex="-1">修改最近一次提交的作者 <a class="header-anchor" href="#修改最近一次提交的作者" aria-label="Permalink to &quot;修改最近一次提交的作者&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">amend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">author</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="撤销-add" tabindex="-1">撤销 add <a class="header-anchor" href="#撤销-add" aria-label="Permalink to &quot;撤销 add&quot;">​</a></h2><p><strong>git add 添加了多余文件</strong> git add . 表示当前目录所有文件，不小心就会提交其他文件 git add 如果添加了错误的文件的话 撤销操作 git status 先看一下 add 中的文件 git reset HEAD 如果后面什么都不跟的话 就是上一次 add 里面的全部撤销了 git reset HEAD XXX.py 就是对某个 py 文件进行撤销了 git reset HEAD file 即使对 file 文件夹进行撤销</p><h2 id="如何删除某一个-commit" tabindex="-1">如何删除某一个 commit <a class="header-anchor" href="#如何删除某一个-commit" aria-label="Permalink to &quot;如何删除某一个 commit&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git log</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Git rebase -i commitId</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>想删除的前一次提交的 commitId Pick 改成 drop 保存退出 Esc:wq</p></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push origin master --force</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="如何撤销上一次-commit" tabindex="-1">如何撤销上一次 commit <a class="header-anchor" href="#如何撤销上一次-commit" aria-label="Permalink to &quot;如何撤销上一次 commit&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>取消上一次 commit,加上--hard 则不保留当前更改</p></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git reset --hard HEAD~1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push --force</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="如何撤销-git-reset-hard" tabindex="-1">如何撤销 git reset --hard <a class="header-anchor" href="#如何撤销-git-reset-hard" aria-label="Permalink to &quot;如何撤销 git reset --hard&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git reflog</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git reset --hard commitId</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="暂时存储" tabindex="-1">暂时存储 <a class="header-anchor" href="#暂时存储" aria-label="Permalink to &quot;暂时存储&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git stash //把本地的改动暂存起来</span></span>
<span class="line"><span>git stash save &quot;message&quot; 执行存储时，添加备注，方便查找。</span></span>
<span class="line"><span>git stash pop // 应用最近一次暂存的修改，并删除暂存的记录</span></span>
<span class="line"><span>git stash apply  // 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。</span></span>
<span class="line"><span>git stash list // 查看 stash 有哪些存储</span></span>
<span class="line"><span>git stash clear // 删除所有缓存的 stash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="远程覆盖本地" tabindex="-1">远程覆盖本地 <a class="header-anchor" href="#远程覆盖本地" aria-label="Permalink to &quot;远程覆盖本地&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ git fetch --all</span></span>
<span class="line"><span>$ git reset --hard origin/master</span></span>
<span class="line"><span>$ git pull</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="本地覆盖远程" tabindex="-1">本地覆盖远程 <a class="header-anchor" href="#本地覆盖远程" aria-label="Permalink to &quot;本地覆盖远程&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push origin master -f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="修改-commit-信息" tabindex="-1">修改 commit 信息 <a class="header-anchor" href="#修改-commit-信息" aria-label="Permalink to &quot;修改 commit 信息&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>‘C’进入 VIM 编辑状态，修改完成。esc 退出编辑，两次大写字母&#39;Z&#39;保存并退出</p></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ git commit --amend</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="github" tabindex="-1">github <a class="header-anchor" href="#github" aria-label="Permalink to &quot;github&quot;">​</a></h2><p>建立 git 仓库，cd 到你的本地项目根目录下，执行 git 命令</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将项目的所有文件添加到仓库中</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git add .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 add 的文件 commit 到仓库</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git commit -m &quot;注释语句&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>去 github 上创建自己的 Repository 复制地址git@github.com:iamporia/***.git 将本地的仓库关联到 github 上</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote add origin git@github.com:iamporia/***.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上传 github 之前，要先 pull 一下</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git pull origin master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上传代码到 github 远程仓库</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push -u origin master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看尚未暂存的文件更新了哪些部分</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git diff</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看已暂存的将要添加到下次提交里的内容</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git diff --cached 或者 git diff --staged</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="移除文件" tabindex="-1">移除文件 <a class="header-anchor" href="#移除文件" aria-label="Permalink to &quot;移除文件&quot;">​</a></h2><p>要从已跟踪文件清单中移除</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git rm filename</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果删除之前修改过并且已经放到暂存区域的话,force 强制</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git rm filename -f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>git 仓库中删除，工作区仍保留</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git rm --cached filename</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="移动文件" tabindex="-1">移动文件 <a class="header-anchor" href="#移动文件" aria-label="Permalink to &quot;移动文件&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git mv file to directory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>rename</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git mv file_from file_to</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其实，运行 git mv 就相当于运行了下面三条命令：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ mv README.md README</span></span>
<span class="line"><span>$ git rm README.md</span></span>
<span class="line"><span>$ git add README</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="查看历史" tabindex="-1">查看历史 <a class="header-anchor" href="#查看历史" aria-label="Permalink to &quot;查看历史&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>-p</strong> 显示每次提交的内容差异</li><li><strong>-2</strong> 显示最近两次提交</li><li><strong>--stat</strong> 显示提交的简略的统计信息</li><li><strong>--pretty</strong> 指定使用不同于默认格式的方式展示提交历史，子选项 oneline，short，full，fuller，format</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git log --pretty=oneline</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="撤销" tabindex="-1">撤销 <a class="header-anchor" href="#撤销" aria-label="Permalink to &quot;撤销&quot;">​</a></h2><ul><li>取消所有暂存的文件</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git reset . 或者 git reset HEAD .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>取消暂存的文件</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git reset HEAD -filename</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ git commit -m &#39;initial commit&#39;</span></span>
<span class="line"><span>$ git add forgotten_file</span></span>
<span class="line"><span>$ git commit --amend</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>最终你只会有一个提交——第二次提交将代替第一次提交的结果。</p><ul><li>撤消对文件的修改</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git checkout -- filename</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h2><ul><li>查看远程仓库 <img src="https://cdn.nlark.com/yuque/0/2020/png/292785/1607917245342-8c11739c-d421-4bab-a7ed-b0f45eef9dc9.png#height=184&amp;id=Iu3le&amp;originHeight=184&amp;originWidth=692&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=692" alt=""></li><li>添加远程仓库</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote add &lt;shortname&gt; &lt;url&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>字符串 shortname 来代替整个 URL，拉取仓库信息 git fetch shortname</p><ul><li>从远程仓库中抓取与拉取</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git fetch [remote-name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git fetch origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令会将数据拉取到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git pull</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你有一个分支设置为跟踪一个远程分支,可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。</p><ul><li>推送到远程仓库</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push [remote-name] [branch-name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>查看某个远程仓库</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote show [remote-name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>远程仓库的移除与重命名</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote rename pb paul</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>值得注意的是这同样也会修改你的远程分支名字。 那些过去引用 pb/master 的现在会引用 paul/master</p><ul><li>移除一个远程仓库 <code>git remote rm [remote-name]</code></li></ul><h2 id="git-alias" tabindex="-1">git alias <a class="header-anchor" href="#git-alias" aria-label="Permalink to &quot;git alias&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git config --global alias.co checkout</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="git-拉取远程分支到本地" tabindex="-1">git 拉取远程分支到本地 <a class="header-anchor" href="#git-拉取远程分支到本地" aria-label="Permalink to &quot;git 拉取远程分支到本地&quot;">​</a></h2><p>1.把远程分支拉到本地 <code>git fetch origin dev（dev为远程仓库的分支名）</code> 2.在本地创建分支 dev 并切换到该分支 <code>git checkout -b dev(本地分支名称)</code> origin/dev(远程分支名称) 3.把某个分支上的内容都拉取到本地 <code>git pull origin dev(远程分支名称)</code></p><h2 id="将-a-分支上的-commit-复制到-b-分支上" tabindex="-1">将 A 分支上的 commit 复制到 B 分支上 <a class="header-anchor" href="#将-a-分支上的-commit-复制到-b-分支上" aria-label="Permalink to &quot;将 A 分支上的 commit 复制到 B 分支上&quot;">​</a></h2><p>方式一 cherry-pick 推荐</p><ul><li>git checkout B</li><li>git cherry-pick commitID</li></ul><p>方式二 rebase git rebase [startpoint] [endpoint] --onto [branchName] <img src="https://cdn.nlark.com/yuque/0/2022/png/292785/1648101985381-a6be5926-5635-4e09-a943-99c11765224c.png#clientId=u1ef2e941-ab25-4&amp;from=paste&amp;height=206&amp;id=ueaa0f3a5&amp;name=image.png&amp;originHeight=206&amp;originWidth=1068&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44685&amp;status=done&amp;style=none&amp;taskId=u0fe3e1ef-9df9-445f-9d8c-964f3b501d3&amp;title=&amp;width=1068" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/292785/1648101967741-13d132c0-c0d6-4d65-ae35-2c5404e1ac8c.png#clientId=u1ef2e941-ab25-4&amp;from=paste&amp;height=372&amp;id=u89ee9c5e&amp;name=image.png&amp;originHeight=372&amp;originWidth=1314&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=117612&amp;status=done&amp;style=none&amp;taskId=u2617d594-4108-4e53-b776-f68c1366216&amp;title=&amp;width=1314" alt="image.png"><strong>git rebase ad85dc7 30510af --onto main</strong><img src="https://cdn.nlark.com/yuque/0/2022/png/292785/1648102604823-825a9f71-4449-48dc-964e-d533d6392b05.png#clientId=u1ef2e941-ab25-4&amp;from=paste&amp;height=318&amp;id=u23f372fe&amp;name=image.png&amp;originHeight=318&amp;originWidth=930&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=90721&amp;status=done&amp;style=none&amp;taskId=u0dba77c2-48d3-49c6-aa9b-f3fde4d0ad3&amp;title=&amp;width=930" alt="image.png"> 所以，虽然此时 HEAD 所指向的内容正是我们所需要的，但是 main 分支是没有任何变化的，git 只是将 dev1-dev4 部分的提交内容复制一份粘贴到了 master 所指向的提交后面，我们需要做的就是将 main 所指向的提交 id 设置为当前 HEAD 所指向的提交 id 就可以了，即: <img src="https://cdn.nlark.com/yuque/0/2022/png/292785/1648102767148-940b305a-2806-4577-aade-647d86a9c678.png#clientId=u1ef2e941-ab25-4&amp;from=paste&amp;height=299&amp;id=iRlSf&amp;name=image.png&amp;originHeight=314&amp;originWidth=798&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=102696&amp;status=done&amp;style=none&amp;taskId=uec0585ab-ca7b-4c75-8029-a7e32700476&amp;title=&amp;width=760" alt="image.png"></p><h2 id="修改已经提交并-push-后的-commit-注释" tabindex="-1">修改已经提交并 push 后的 commit 注释 <a class="header-anchor" href="#修改已经提交并-push-后的-commit-注释" aria-label="Permalink to &quot;修改已经提交并 push 后的 commit 注释&quot;">​</a></h2><p>把代码 push 到远程后，发现 commit 的注释居然多了几个错别字，不行，必须改了！ 搜索了一些答案之后自己做了一个总结如下：</p><ul><li>修改倒数第 1 次的 commit</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ git rebase -i HEAD~1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>修改 pick 为 edit</li><li>回车后进入一个页面， 按 i 进入编辑模式， 将要修改的那一条的 pick 修改成 edit， 按 esc 退出编辑模式，输入:wq 保存并退出<br></li><li>修改 commit 注释内容</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git commit --amend</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>按 i 进入编辑模式，修改内容，退出编辑模式，输入:wq 保存并退出</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git rebase --continue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>强制 push</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git push --force github</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="撤销某次提交" tabindex="-1">撤销某次提交 <a class="header-anchor" href="#撤销某次提交" aria-label="Permalink to &quot;撤销某次提交&quot;">​</a></h2><ol><li><p>普通撤销</p><p><code>git revert commit-id</code> 版本是叠加的 会生成一个 commit 记录（跟 reset 不一样） <img src="https://cdn.nlark.com/yuque/0/2021/png/292785/1616150182838-d8528a81-e250-44e3-8bbd-2f287b422de2.png#height=56&amp;id=BknrE&amp;name=image.png&amp;originHeight=57&amp;originWidth=447&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10859&amp;status=done&amp;style=none&amp;title=&amp;width=442" alt="image.png"></p></li><li><p>撤销 merge 的 commit</p><p><code>git revert commit-id -m 1</code></p></li></ol><h2 id="git-branch" tabindex="-1">git branch <a class="header-anchor" href="#git-branch" aria-label="Permalink to &quot;git branch&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 新建本地分支，但不切换</span></span>
<span class="line"><span>git branch &lt;branch-name&gt;</span></span>
<span class="line"><span># 查看本地分支</span></span>
<span class="line"><span>git branch</span></span>
<span class="line"><span># 查看远程分支</span></span>
<span class="line"><span>git branch -r</span></span>
<span class="line"><span># 查看本地和远程分支</span></span>
<span class="line"><span>git branch -a</span></span>
<span class="line"><span># 删除本地分支</span></span>
<span class="line"><span>git branch -D &lt;branch-nane&gt;</span></span>
<span class="line"><span># 重新命名分支</span></span>
<span class="line"><span>git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt;</span></span>
<span class="line"><span># 删除远程分支</span></span>
<span class="line"><span>git push origin --delete your_branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="远程已经删除的分支-本地-git-branch-a-还是能查看到" tabindex="-1">远程已经删除的分支 本地 git branch -a 还是能查看到 <a class="header-anchor" href="#远程已经删除的分支-本地-git-branch-a-还是能查看到" aria-label="Permalink to &quot;远程已经删除的分支 本地 git branch -a 还是能查看到&quot;">​</a></h3><div class="language-git vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="本地修改不想提交的情况下用-stash-暂存" tabindex="-1">本地修改不想提交的情况下用 stash 暂存 <a class="header-anchor" href="#本地修改不想提交的情况下用-stash-暂存" aria-label="Permalink to &quot;本地修改不想提交的情况下用 stash 暂存&quot;">​</a></h2><p>暂存到本地</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git stash save &#39;msg&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>场景：A 在 dev 分支开发新的功能，突然大佬说要优先改个别的问题。新功能没开发完，不想提交。怎么办？ 这个时候就可以用 stash 把更改暂存本地 本地工作区 clean 之后就可以随意切换分支了 <img src="https://cdn.nlark.com/yuque/0/2021/png/292785/1621224060277-2b5cc94f-9496-48d0-97a6-fca3ee59ddb4.png#clientId=u09f03e4b-9868-4&amp;from=paste&amp;height=168&amp;id=u3e9805a5&amp;name=image.png&amp;originHeight=335&amp;originWidth=753&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73049&amp;status=done&amp;style=none&amp;taskId=u373077cb-0de8-447d-b07d-b6ec67593ec&amp;title=&amp;width=376.5" alt="image.png"> git stash list 可查看暂存的 list <img src="https://cdn.nlark.com/yuque/0/2021/png/292785/1621224081563-a0031304-aaec-4029-9f1b-66f065eea60b.png#clientId=u09f03e4b-9868-4&amp;from=paste&amp;height=44&amp;id=u367e2a8a&amp;name=image.png&amp;originHeight=87&amp;originWidth=525&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10319&amp;status=done&amp;style=none&amp;taskId=u6f13b225-cd05-4a3c-a160-7dc5fd841e8&amp;title=&amp;width=262.5" alt="image.png"> git stash pop stash@{id} 不写 stash@{id} 默认 pop 最近的一次 <img src="https://cdn.nlark.com/yuque/0/2021/png/292785/1621224101912-45efce98-0ba0-49fd-9762-734d4ea66016.png#clientId=u09f03e4b-9868-4&amp;from=paste&amp;height=158&amp;id=ue306c49e&amp;name=image.png&amp;originHeight=316&amp;originWidth=729&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62328&amp;status=done&amp;style=none&amp;taskId=uccaaa0a1-12eb-4fcd-bfea-9c2fa3e520b&amp;title=&amp;width=364.5" alt="image.png"> 默认情况下，git stash 会缓存下列文件：</p><ul><li>添加到暂存区的修改（staged changes）</li><li>Git 跟踪的但并未添加到暂存区的修改（unstaged changes）</li><li>但不会缓存一下文件：</li><li>在工作目录中新的文件（untracked files）</li><li>被忽略的文件（ignored files）</li></ul><p>git stash 命令提供了参数用于缓存上面两种类型的文件。使用-u 或者--include-untracked 可以 stash untracked 文件。使用-a 或者--all 命令可以 stash 当前目录下的所有修改。 至于 git stash 的其他命令建议参考 Git manual。 <a href="https://www.cnblogs.com/tocy/p/git-stash-reference.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/tocy/p/git-stash-reference.html</a></p><h2 id="merge-某些文件" tabindex="-1">merge 某些文件 <a class="header-anchor" href="#merge-某些文件" aria-label="Permalink to &quot;merge 某些文件&quot;">​</a></h2><p><code>git checkout branch_name file_url</code></p><h2 id="merge-冲突部分以-xx-为准" tabindex="-1">merge 冲突部分以 xx 为准 <a class="header-anchor" href="#merge-冲突部分以-xx-为准" aria-label="Permalink to &quot;merge 冲突部分以 xx 为准&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git merge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xours dev # 冲突部分以当前分支为准</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git merge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xtheirs dev # 冲突部分以待合并分支为准</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="合并-commit" tabindex="-1">合并 commit <a class="header-anchor" href="#合并-commit" aria-label="Permalink to &quot;合并 commit&quot;">​</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/292785/1648100941262-0a596426-4b04-4f36-b74b-bfeb2454c760.png#clientId=u1ef2e941-ab25-4&amp;from=paste&amp;height=284&amp;id=u5b705155&amp;name=image.png&amp;originHeight=284&amp;originWidth=1304&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63198&amp;status=done&amp;style=none&amp;taskId=ue39d5ed0-38fe-4d72-8f51-5a8e2a3ac0d&amp;title=&amp;width=1304" alt="image.png"> 现在我们在测试分支上添加了五次提交，我们的目标是把最后四个提交合并为一个提交</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git rebase -i d661c52</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pick：保留该commit（缩写:p）</span></span>
<span class="line"><span>reword：保留该commit，但我需要修改该commit的注释（缩写:r）</span></span>
<span class="line"><span>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</span></span>
<span class="line"><span>squash：将该commit和前一个commit合并（缩写:s）</span></span>
<span class="line"><span>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</span></span>
<span class="line"><span>exec：执行shell命令（缩写:x）</span></span>
<span class="line"><span>drop：我要丢弃该commit（缩写:d）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>根据自己的需要修改注释 提交</p><h2 id="git-rebase-让你的提交记录更加清晰可读" tabindex="-1">git rebase 让你的提交记录更加清晰可读 <a class="header-anchor" href="#git-rebase-让你的提交记录更加清晰可读" aria-label="Permalink to &quot;git rebase 让你的提交记录更加清晰可读&quot;">​</a></h2><p>rebase 翻译为变基，他的作用和 merge 很相似，用于把一个分支的修改合并到当前分支上。<a href="https://juejin.cn/post/6974184935804534815" target="_blank" rel="noreferrer">掘金</a></p>`,138),t=[p];function l(r,d,c,o,m,h){return e(),s("div",null,t)}const g=a(i,[["render",l]]);export{b as __pageData,g as default};
